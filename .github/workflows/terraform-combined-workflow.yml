name: Terraform Plan Dispatcher

on:
  push:
    paths:
      - 'terraform/**'
    branches: 
      - feature/**
      # - main
  workflow_dispatch:
    inputs:
      path:
        description: 'Relative Path to Terraform file'
        required: true
      destroy_plan:
        description: 'Terraform Destroy Plan'
        required: false
        type: boolean
        default: false

jobs:
  fetch-push-details:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Ensure we have two commits
        run: git fetch --deepen=2

      - name: Generate matrix from changed files
        id: set-matrix
        run: |
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"

          # Get last two commits on current branch
          commits=($(git log --format="%H" -n 2))
          if [ "${#commits[@]}" -lt 2 ]; then
            echo "Not enough commits to compare."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          latest_commit=${commits[0]}
          previous_commit=${commits[1]}

          echo "Comparing: $previous_commit..$latest_commit"

          changed_files=$(git diff --name-only "$previous_commit" "$latest_commit" | grep '^terraform/' || true)

          echo "Changed files:"
          echo "$changed_files"

          if [ -z "$changed_files" ]; then
            echo "No terraform files changed."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          dir_paths=$(echo "$changed_files" \
            | xargs -n1 dirname \
            | grep '^terraform/.*/.*/.*/.*' \
            | sort -u)

          matrix=$(echo "$dir_paths" | sed 's|^terraform/||' \
            | jq -R -s -c 'split("\n") | map(select(. != "")) 
                | map(split("/") | {app_name: .[0], aws_region: .[1], app_env: .[2], component: .[3]})')

          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Matrix JSON: $matrix"

  plan-push:
    if: ${{ github.event_name == 'push' }}
    needs: fetch-push-details
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.fetch-push-details.outputs.matrix) }} 
    environment: ${{ matrix.app_env }}
    steps:

      - uses: actions/checkout@v4 
      - name: Run Terraform Plan for push
        uses: ./.github/actions/terraform-plan
        with:
          app_name: ${{ matrix.app_name }}
          aws_region: ${{ matrix.aws_region }}
          app_env: ${{ matrix.app_env }}
          aws_acc_id: ${{ vars.AWS_ACC_ID }}
          component: ${{ matrix.component }}
          tf-destroy: false

      - name: Write inputs to summary
        run: |
          echo "# Terraform Plan Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| App Name | ${{ matrix.app_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ matrix.app_env }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Region | ${{ matrix.aws_region }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Component | ${{ matrix.component }} |" >> $GITHUB_STEP_SUMMARY

  fetch-dispatch-details:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      app_name: ${{ steps.parse.outputs.app_name }}
      aws_region: ${{ steps.parse.outputs.aws_region }}
      app_env: ${{ steps.parse.outputs.app_env }}
      component: ${{ steps.parse.outputs.component }}
      destroy_plan: ${{ inputs.destroy_plan }}

    steps:
      - uses: actions/checkout@v4

      - name: Parse path input
        id: parse
        run: |
          # Check if the path ends with a .tf file
          if [[ "${{ inputs.path }}" == *.tf ]]; then
            relative_path=$(dirname "${{ inputs.path }}")
            echo "dir_path=$relative_path" >> $GITHUB_OUTPUT
          else
            relative_path="${{ inputs.path }}"
            echo "dir_path=$relative_path" >> $GITHUB_OUTPUT
          fi

          #fetch region and environemnt
          app_name=$(echo "$relative_path" | cut -d'/' -f2)
          region=$(echo "$relative_path" | cut -d'/' -f3)
          env=$(echo "$relative_path" | cut -d'/' -f4)
          component=$(echo "$relative_path" | cut -d'/' -f5)
          echo "app_name=$app_name" >> $GITHUB_OUTPUT
          echo "aws_region=$region" >> $GITHUB_OUTPUT
          echo "app_env=$env" >> $GITHUB_OUTPUT
          echo "component=$component" >> $GITHUB_OUTPUT

      - name: Write inputs to summary
        run: |
          if [ "${{ inputs.destroy_plan }}" = "true" ]; then
            echo "# Terraform Destroy Plan Configuration" >> $GITHUB_STEP_SUMMARY
          else
            echo "# Terraform Plan Configuration" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| App Name | ${{ steps.parse.outputs.app_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ steps.parse.outputs.app_env }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Region | ${{ steps.parse.outputs.aws_region }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Component | ${{ steps.parse.outputs.component }} |" >> $GITHUB_STEP_SUMMARY

  tf-plan-dispatch:
    if: ${{ needs.fetch-dispatch-details.outputs.destroy_plan == 'false' }}
    needs: fetch-dispatch-details
    environment: ${{ needs.fetch-dispatch-details.outputs.app_env }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Terraform Plan for dispatch
        uses: ./.github/actions/terraform-plan
        with:
          app_name: ${{ needs.fetch-dispatch-details.outputs.app_name }}
          aws_region: ${{ needs.fetch-dispatch-details.outputs.aws_region }}
          app_env: ${{ needs.fetch-dispatch-details.outputs.app_env }}
          aws_acc_id: ${{ vars.AWS_ACC_ID }}
          component: ${{ needs.fetch-dispatch-details.outputs.component }}
          tf-destroy: ${{ needs.fetch-dispatch-details.outputs.destroy_plan }}

  tf-destroy-plan-dispatch:
    if: ${{ needs.fetch-dispatch-details.outputs.destroy_plan == 'true' }}
    needs: fetch-dispatch-details
    environment: ${{ needs.fetch-dispatch-details.outputs.app_env }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Terraform Destroy Plan for dispatch
        uses: ./.github/actions/terraform-plan
        with:
          app_name: ${{ needs.fetch-dispatch-details.outputs.app_name }}
          aws_region: ${{ needs.fetch-dispatch-details.outputs.aws_region }}
          app_env: ${{ needs.fetch-dispatch-details.outputs.app_env }}
          aws_acc_id: ${{ vars.AWS_ACC_ID }}
          component: ${{ needs.fetch-dispatch-details.outputs.component }}
          tf-destroy: ${{ needs.fetch-dispatch-details.outputs.destroy_plan }}
            